-- File generated by the BNF Converter (bnfc 2.9.3).
-- Templates for pattern matching on abstract syntax
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Haskcalc.Expr.Skel where

import qualified Haskcalc.Expr.Abs
import Prelude (Either (..), Show, String, show, ($), (++))

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Haskcalc.Expr.Abs.Ident -> Result
transIdent x = case x of
  Haskcalc.Expr.Abs.Ident string -> failure x

transDecl :: Haskcalc.Expr.Abs.Decl -> Result
transDecl x = case x of
  Haskcalc.Expr.Abs.FunDecl ident idents decls -> failure x
  Haskcalc.Expr.Abs.LetDecl ident expr -> failure x
  Haskcalc.Expr.Abs.ExprDecl expr -> failure x

transExpr :: Haskcalc.Expr.Abs.Expr -> Result
transExpr x = case x of
  Haskcalc.Expr.Abs.Add expr1 expr2 -> failure x
  Haskcalc.Expr.Abs.Mult expr1 expr2 -> failure x
  Haskcalc.Expr.Abs.App ident exprs -> failure x
  Haskcalc.Expr.Abs.Val ident -> failure x
  Haskcalc.Expr.Abs.Lit integer -> failure x
