-- File generated by the BNF Converter (bnfc 2.9.3).
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Expr.
module Haskcalc.Expr.Abs where

import qualified Data.String
import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Read, Show)

import qualified Data.Data as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

data Decl
  = FunDecl Ident [Ident] [Decl]
  | LetDecl Ident Expr
  | ExprDecl Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Expr
  = Add Expr Expr
  | Mult Expr Expr
  | App Ident [Expr]
  | Val Ident
  | Lit Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic, Data.String.IsString)
