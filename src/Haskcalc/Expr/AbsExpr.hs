-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language Expr.

module Haskcalc.Expr.AbsExpr where

import qualified Data.String
import           Prelude     (Integer, String)
import qualified Prelude     as C (Eq, Ord, Read, Show)

data Decl
    = FunDecl Ident [Ident] [Decl]
    | LetDecl Ident Expr
    | ExprDecl Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = Add Expr Expr
    | Mult Expr Expr
    | App Ident [Expr]
    | Val Ident
    | Lit Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

